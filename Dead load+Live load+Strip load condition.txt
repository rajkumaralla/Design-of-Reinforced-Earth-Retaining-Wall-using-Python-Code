import math

#Inputing required parameters
pi= float((input("Enter angle of internal friction : ")))
Vb = float((input("Enter Density of backfill (KN/m3) : ")))
L = float((input("Enter Reinforcement length of wall (m) : ")))
H = float((input("Enter Height of Retaining wall (m) : ")))
Qd = float((input("Enter Dead load due to surcharge (KN/m2) : ")))
Ql = float((input("Enter Live load (KN/m2) : ")))
F1 = float((input("Enter Horizontal line Load (KN/m) : ")))
V1 = float((input("Enter Vertical line Load (KN/m) : ")))
b = float((input("Enter Width of Strip (m)  : ")))
d = float((input("Enter Distance of wall to centre of strip (m) : ")))
sbc = float((input("Enter Safe bearing capacity of soil (KN/m2) : ")))
mue = 0.9*(math.tan(math.radians(pi)))
teta = 90-((45)+(pi/2))
Cfg = 1
Ci = 0.85
alpa = 0.8
c = d+(b/2)
L1 = (d+(b/2))*math.tan(math.radians(45+(pi/2)))
Hmax = (2*F1)/L1
ka = (1 - math.sin(math.radians(pi)))/(1 + math.sin(math.radians(pi)))
print("Coefficient of active earth pressure is", ka)
print("───────────────────────────────────────────────────────────────────────────────")
print("DESIGN OF RE RETAINING WALL : DEAD LOAD + LIVE LOAD + HORIZONTAL & VERTICAL LINE LOAD CONDITION")
print("───────────────────────────────────────────────────────────────────────────────")

#Factor of safety agaisnt Sliding
print("EXTERNAL STABILITY CHECKS")
print("───────────────────────────────────────────────────────────────────────────────")
Pv1 = Vb*H*L
Pv2 = Qd*L
Pv3 = V1
Rf1 = Pv1+Pv2+Pv3
Rf = Pv1+Pv2+(Ql*L)+V1
Rh = ((ka*Qd*H)+(ka*Ql*H)+(0.5*ka*Vb*H*H))
Fos1 = (mue*(Rf1+V1))/(Rh+F1)
print("Factor of safety against sliding is", Fos1)
if Fos1>1.5:
    print("Fos>1.5, Hence Safe against sliding")
else :
    print("Not Safe against sliding")
print("───────────────────────────────────────────────────────────────────────────────")

#Factor of safety against Overturning
Mr = (Pv1*(L/2)+Pv2*(L/2)+V1*d)
Mo = ((ka*Qd*0.5*H*H)+(ka*Ql*0.5*H*H)+(0.5*ka*Vb*H*H*H/3)+(F1*H))
Fos2 = Mr/Mo
print("Factor of safety against Overturning is", Fos2)
if Fos2>2:
    print("Fos>2, Hence Safe against overturning")
else :
    print("Not Safe against overturning")
print("───────────────────────────────────────────────────────────────────────────────")

#Eccentricity
e = (L/2)-((Mr-Mo)/Rf1)
print("Eccentricity is", e)
if e<=(L/6):
    print("e<L/6, Hence Safe against eccentricity")
else :
    print("Not safe against eccentricity")
print("───────────────────────────────────────────────────────────────────────────────")

#Bearing Pressure
Qb = Rf/(L-2*e)
print("Bearing Pressure is", Qb)
if Qb<sbc:
    print("Qb<sbc, Hence Safe in Bearing")
else :
    print("Not safe against bearing")
print("───────────────────────────────────────────────────────────────────────────────")

#Internal Stability checks

if Fos1>1.5 and Fos2>2 and  e<=(L/6) and  Qb<sbc:
    print("INTERNAL STABILITY CHECKS")
    print("───────────────────────────────────────────────────────────────────────────────")
#Factor of Safety against Rupture
    print("FACTOR OF SAFETY AGAINST RUPTURE")
    print("───────────────────────────────────────────────────────────────────────────────")
    
    print("%-9s %-9s %-4s %-4s %-9s %-9s %-7s %-7s %-7s" %("Height(h)","Spacing(Sv)","𝜎H","V1/b","Stress(V)","Stress(H)","Tension(T)","Strength(Td)","FOS"))
    print("───────────────────────────────────────────────────────────────────────────────")
    h = 0.25
    while h <= H-0.25 :
        if h == 0.25 :
            Sv = 0.625
        elif H-h <= 0.75 :
            Sv = (0.75/2)+(H-h)
        else :
            Sv = 0.75
        b1 = b+(4*h)
        if b1 < L :
            b1 = b1
        else :
            b1 = L
        if h < L1 :
            Hl = Hmax*(L1-h)/L1
        else :
            Hl = 0
        V = (Vb*h)+Qd+Ql+(V1/b1)
        H1 = (ka*V)+Hl
        T = H1*Sv
        Td = 20
        Fos3 = Td/T
        if Fos3>1.5 :
            Td = 20
        else :
            Td = Td+20
            Fos3 = Td/T
        if Fos3<1.5 :
            Td = Td+20
            Fos3 = Td/T
            if Fos3<1.5 :
                Td = Td+20
                Fos3 = Td/T
                if Fos3<1.5 :
                    Td = Td+20
                    Fos3 = Td/T
                    if Fos3<1.5 :
                        Td = Td+20
                        Fos3 = Td/T
                        if Fos3<1.5 :
                            Td = Td+20
                            Fos3 = Td/T
                            if Fos3<1.5 :
                                Td = Td+20
                                Fos3 = Td/T
                                if Fos3<1.5 :
                                    Td = Td+20
                                    Fos3 = Td/T
                                    if Fos3<1.5 :
                                        Td = Td+20
                                        Fos3 = Td/T
            
        print("%-10s %-10s %-6s %-6s %-8s %-8s %-12s %-8s %-10s" %
             ('%.2f'%h,'%.3f'%Sv,'%.1f'%Hl,'%.2f'%(V1/b1),'%.2f'%V,'%.2f'%H1,
             '%.2f'%T,'%.f'%Td,'%.2f'%Fos3))
        h = h+0.75
    print("───────────────────────────────────────────────────────────────────────────────")
    
#Factor of Safety against Pullout Resistance
    print("FACTOR OF SAFETY AGAINST PULLOUT RESISTANCE")
    print("───────────────────────────────────────────────────────────────────────────────")

    print("%-8s %-10s %-8s %-6s %-20s %-20s %-20s" %("hi","Laj","Lej","hj","Vertical stress(Vj)","Pullout(P)","FOS"))
    print("───────────────────────────────────────────────────────────────────────────────")
    hi = H-0.25
    hj = 0.25
    h = 0.25 
    while hi>=0.25 and h <= H-0.25 :
        Laj = math.tan(math.radians(teta))*hi
        Lej = L-Laj
        Vj = (hj*Vb)+Qd
        if h == 0.25 :
            Sv = 0.625
        elif H-h <= 0.75 :
            Sv = (0.75/2)+(H-h)
        else :
            Sv = 0.75
        V = (Vb*h)+Qd+Ql
        b1 = b+(4*h)
        if b1 < L :
            b1 = b1
        else :
            b1 = L
        if h < L1 :
            Hl = Hmax*(L1-h)/L1
        else :
            Hl = 0
        V = (Vb*h)+Qd+Ql+(V1/b1)
        H1 = (ka*V)+Hl
        T = H1*Sv
        P = 2*Lej*Cfg*Vj*Ci*alpa*math.tan(math.radians(pi))
        Fos4 = P/T
        print("%-8s %-10s %-8s %-13s %-15s %-16s %-20s" %('%.3f'%hi,'%.3f'%Laj,'%.3f'%Lej,'%.2f'%hj,'%.2f'%Vj,'%.2f'%P,'%.2f'%Fos4))
        hi = hi-0.75
        hj = hj+0.75
        h = h+0.75
    print("───────────────────────────────────────────────────────────────────────────────")
    print("Hence safe against Rupture & Pullout Resistance")
    print("───────────────────────────────────────────────────────────────────────────────")
    print("Provide length of reinforcement:", L,"m")
    print("Provide spacing of reinforcement: 0.625m at top layer",",",Sv,"m at bottom layer and 0.75m at remaining layers with appropriate grade of reinforcement as shown above")
else :
    print("Hence not safe, increase length of reinforcement")